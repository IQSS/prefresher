[
["suggested-programming-solutions.html", "Suggested Programming Solutions 15.5 Chapter 9: Visualization 15.6 Chapter 10: Objects and Loops 15.7 Chapter 11: Demoratic Peace Project 15.8 Chapter 12: Simulation", " Suggested Programming Solutions library(dplyr) library(readr) library(ggplot2) library(ggrepel) library(forcats) library(scales) 15.5 Chapter 9: Visualization 1 State Proportions cen10 &lt;- readRDS(&quot;data/input/usc2010_001percent.Rds&quot;) Group by state, noting that the mean of a set of logicals is a mean of 1s (TRUE) and 0s (FALSE). grp_st &lt;- cen10 %&gt;% group_by(state) %&gt;% summarize(prop = mean(age &gt;= 65)) %&gt;% arrange(prop) %&gt;% mutate(state = as_factor(state)) Plot points ggplot(grp_st, aes(x = state, y = prop)) + geom_point() + coord_flip() + scale_y_continuous(labels = percent_format(accuracy = 1)) + # use the scales package to format percentages labs( y = &quot;Proportion Senior&quot;, x = &quot;&quot;, caption = &quot;Source: 2010 Census sample&quot; ) 2 Swing Justice justices &lt;- read_csv(&quot;data/input/justices_court-median.csv&quot;) Keep justices who are in the dataset in 2016, in_2017 &lt;- justices %&gt;% filter(term &gt;= 2016) %&gt;% distinct(justice) %&gt;% # unique values mutate(present_2016 = 1) # keep an indicator to distinguish from rest after merge df_indicator &lt;- justices %&gt;% left_join(in_2017) ## Joining, by = &quot;justice&quot; All together ggplot(df_indicator, aes(x = term, y = idealpt, group = justice_id)) + geom_line(aes(y = median_idealpt), color = &quot;red&quot;, size = 2, alpha = 0.1) + geom_line(alpha = 0.5) + geom_line(data = filter(df_indicator, !is.na(present_2016))) + geom_point(data = filter(df_indicator, !is.na(present_2016), term == 2018)) + geom_text_repel( data = filter(df_indicator, term == 2016), aes(label = justice), nudge_x = 10, direction = &quot;y&quot; ) + # labels nudged and vertical scale_x_continuous(breaks = seq(1940, 2020, 10), limits = c(1937, 2020)) + # axis breaks scale_y_continuous(limits = c(-5, 5)) + # axis limits labs( x = &quot;SCOTUS Term&quot;, y = &quot;Estimated Martin-Quinn Ideal Point&quot;, caption = &quot;Outliers capped at -5 to 5. Red lines indicate median justice. Current justices of the 2017 Court in black.&quot; ) + theme_bw() ## Warning: Removed 19 rows containing missing values (geom_path). 15.6 Chapter 10: Objects and Loops cen10 &lt;- read_csv(&quot;data/input/usc2010_001percent.csv&quot;) sample_acs &lt;- read_csv(&quot;data/input/acs2015_1percent.csv&quot;) Checkpoint #3 cen10 %&gt;% group_by(state) %&gt;% summarise(avg_age = mean(age)) %&gt;% arrange(desc(avg_age)) %&gt;% slice(1:10) ## # A tibble: 10 x 2 ## state avg_age ## &lt;chr&gt; &lt;dbl&gt; ## 1 West Virginia 44.1 ## 2 Maine 42.1 ## 3 Florida 41.3 ## 4 New Hampshire 41.2 ## 5 North Dakota 41.1 ## 6 Montana 40.6 ## 7 Vermont 40.3 ## 8 Connecticut 40.1 ## 9 Wisconsin 39.9 ## 10 New Mexico 39.3 Exercise 1 colnames(sample_acs) ## [1] &quot;serial&quot; &quot;pernum&quot; &quot;hhwt&quot; ## [4] &quot;perwt&quot; &quot;state&quot; &quot;county_identified&quot; ## [7] &quot;puma&quot; &quot;city&quot; &quot;sex&quot; ## [10] &quot;age&quot; &quot;birthyr&quot; &quot;race&quot; ## [13] &quot;hispan&quot; &quot;educ&quot; &quot;citizen&quot; ## [16] &quot;yrnatur&quot; unique(sample_acs$citizen) ## [1] &quot;Born in the US&quot; ## [2] &quot;US citizen by naturalization&quot; ## [3] &quot;Not a citizen of the US&quot; ## [4] &quot;Born abroad of American parent(s)&quot; ## [5] &quot;Born in Puerto Rico, Guam, the US Virgin Islands,or the Northern Marianas&quot; mean(sample_acs$citizen != &quot;Not a citizen of the US&quot;) ## [1] 0.9419765 Exercise 3 states_of_interest &lt;- c(&quot;California&quot;, &quot;Massachusetts&quot;, &quot;New Hampshire&quot;, &quot;Washington&quot;) for (state_i in states_of_interest) { state_subset &lt;- cen10 %&gt;% filter(state == state_i) print(state_i) print(table(state_subset$race, state_subset$sex)) } ## [1] &quot;California&quot; ## ## Female Male ## American Indian or Alaska Native 21 21 ## Black/Negro 127 126 ## Chinese 76 65 ## Japanese 15 12 ## Other Asian or Pacific Islander 182 177 ## Other race, nec 283 302 ## Three or more major races 7 7 ## Two major races 91 83 ## White 1085 1083 ## [1] &quot;Massachusetts&quot; ## ## Female Male ## American Indian or Alaska Native 4 1 ## Black/Negro 21 17 ## Chinese 8 7 ## Japanese 1 1 ## Other Asian or Pacific Islander 14 14 ## Other race, nec 9 17 ## Two major races 10 8 ## White 272 243 ## [1] &quot;New Hampshire&quot; ## ## Female Male ## American Indian or Alaska Native 1 0 ## Black/Negro 0 1 ## Chinese 0 1 ## Japanese 1 0 ## Other Asian or Pacific Islander 2 1 ## Other race, nec 1 0 ## Two major races 0 1 ## White 66 63 ## [1] &quot;Washington&quot; ## ## Female Male ## American Indian or Alaska Native 9 5 ## Black/Negro 11 9 ## Chinese 2 7 ## Japanese 4 0 ## Other Asian or Pacific Islander 28 18 ## Other race, nec 19 18 ## Three or more major races 0 2 ## Two major races 17 16 ## White 267 257 Exercise 4 race_d &lt;- c() state_d &lt;- c() proportion_d &lt;- c() answer &lt;- data.frame(race_d, state_d, proportion_d) Then for (state in states_of_interest) { for (race in unique(cen10$race)) { race_state_num &lt;- nrow(cen10[cen10$race == race &amp; cen10$state == state, ]) state_pop &lt;- nrow(cen10[cen10$state == state, ]) race_perc &lt;- round(100 * (race_state_num / (state_pop)), digits = 2) line &lt;- data.frame(race_d = race, state_d = state, proportion_d = race_perc) answer &lt;- rbind(answer, line) } } 15.7 Chapter 11: Demoratic Peace Project Task 1: Data Input and Standardization mid_b &lt;- read_csv(&quot;data/input/MIDB_4.2.csv&quot;) polity &lt;- read_excel(&quot;data/input/p4v2017.xls&quot;) Task 2: Data Merging mid_y_by_y &lt;- data_frame(ccode = numeric(), year = numeric(), dispute = numeric()) colnames(mid_b) for(i in 1:nrow(mid_b)) { x &lt;- data_frame(ccode = mid_b$ccode[i], ## row i&#39;s country year = mid_b$styear[i]:mid_b$endyear[i], ## sequence of years for dispute in row i dispute = 1)## there was a dispute mid_y_by_y &lt;- rbind(mid_y_by_y, x) } merged_mid_polity &lt;- left_join(polity, distinct(mid_y_by_y), by = c(&quot;ccode&quot;, &quot;year&quot;)) Task 3: Tabulations and Visualization #don&#39;t include the -88, -77, -66 values in calculating the mean of polity mean_polity_by_year &lt;- merged_mid_polity %&gt;% group_by(year) %&gt;% summarise(mean_polity = mean(polity[which(polity &lt;11 &amp; polity &gt; -11)])) mean_polity_by_year_ordered &lt;- arrange(mean_polity_by_year, year) mean_polity_by_year_mid &lt;- merged_mid_polity %&gt;% group_by(year, dispute) %&gt;% summarise(mean_polity_mid = mean(polity[which(polity &lt;11 &amp; polity &gt; -11)])) mean_polity_by_year_mid_ordered &lt;- arrange(mean_polity_by_year_mid, year) mean_polity_no_mid &lt;- mean_polity_by_year_mid_ordered %&gt;% filter(dispute == 0) mean_polity_yes_mid &lt;- mean_polity_by_year_mid_ordered %&gt;% filter(dispute == 1) answer &lt;- ggplot(data = mean_polity_by_year_ordered, aes(x = year, y = mean_polity)) + geom_line() + labs(y = &quot;Mean Polity Score&quot;, x = &quot;&quot;) + geom_vline(xintercept = c(1914, 1929, 1939, 1989, 2008), linetype = &quot;dashed&quot;) answer + geom_line(data =mean_polity_no_mid, aes(x = year, y = mean_polity_mid), col = &quot;indianred&quot;) + geom_line(data =mean_polity_yes_mid, aes(x = year, y = mean_polity_mid), col = &quot;dodgerblue&quot;) 15.8 Chapter 12: Simulation 15.8.1 Census Sampling pop &lt;- read_csv(&quot;data/input/usc2010_001percent.csv&quot;) ## Parsed with column specification: ## cols( ## state = col_character(), ## sex = col_character(), ## age = col_double(), ## race = col_character() ## ) mean(pop$race != &quot;White&quot;) ## [1] 0.2806517 set.seed(1669482) samp &lt;- sample_n(pop, 100) mean(samp$race != &quot;White&quot;) ## [1] 0.22 ests &lt;- c() set.seed(1669482) for (i in 1:20) { samp &lt;- sample_n(pop, 100) ests[i] &lt;- mean(samp$race != &quot;White&quot;) } mean(ests) pop_with_prop &lt;- mutate(pop, propensity = ifelse(race != &quot;White&quot;, 0.9, 1)) ests &lt;- c() set.seed(1669482) for (i in 1:20) { samp &lt;- sample_n(pop_with_prop, 100, weight = propensity) ests[i] &lt;- mean(samp$race != &quot;White&quot;) } mean(ests) ests &lt;- c() set.seed(1669482) for (i in 1:20) { samp &lt;- sample_n(pop_with_prop, 10000, weight = propensity) ests[i] &lt;- mean(samp$race != &quot;White&quot;) } mean(ests) "]
]
